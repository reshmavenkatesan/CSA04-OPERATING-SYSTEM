#include<stdio.h>
#include<stdlib.h>

#define MAX_FRAMES 3 // Maximum number of frames in memory

// Function to check if a page is present in memory
int isPagePresent(int page, int *memory, int num_frames) {
    for (int i = 0; i < num_frames; i++) {
        if (memory[i] == page)
            return 1; // Page is present
    }
    return 0; // Page is not present
}

// Function to display contents of memory
void displayMemory(int *memory, int num_frames) {
    printf("Memory: ");
    for (int i = 0; i < num_frames; i++) {
        if (memory[i] == -1)
            printf("[ ] ");
        else
            printf("[%d] ", memory[i]);
    }
    printf("\n");
}

int main() {
    int num_pages, page_faults = 0;
    int pages[50], memory[MAX_FRAMES];
    int front = 0; // Pointer for FIFO

    // Initialize memory with -1 indicating empty frames
    for (int i = 0; i < MAX_FRAMES; i++) {
        memory[i] = -1;
    }

    printf("Enter the number of pages: ");
    scanf("%d", &num_pages);

    printf("Enter the page reference string: ");
    for (int i = 0; i < num_pages; i++) {
        scanf("%d", &pages[i]);
    }

    // Simulate FIFO page replacement algorithm
    for (int i = 0; i < num_pages; i++) {
        if (!isPagePresent(pages[i], memory, MAX_FRAMES)) {
            printf("Page %d caused a page fault.\n", pages[i]);
            memory[front] = pages[i]; // Replace page at front
            front = (front + 1) % MAX_FRAMES; // Move front pointer circularly
            page_faults++;
            displayMemory(memory, MAX_FRAMES);
        }
    }

    printf("Total Page Faults: %d\n", page_faults);

    return 0;
}
