#include <stdio.h>
#include <stdlib.h>

#define MAX_REQUESTS 1000
#define CYLINDERS 5000
#define START_POSITION 143

// Function to sort an array of integers in ascending order
void sort(int arr[], int n) {
    int i, j, temp;
    for (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

// Function to simulate C-SCAN disk scheduling algorithm
void cscan(int requests[], int n) {
    int head = START_POSITION;
    int total_movement = 0;

    sort(requests, n);

    // Move the head towards higher cylinders
    int i;
    for (i = 0; i < n; i++) {
        if (requests[i] >= head) {
            total_movement += abs(requests[i] - head);
            head = requests[i];
        }
    }

    // Move the head from the highest cylinder to the lowest cylinder
    total_movement += CYLINDERS - head;
    head = 0;

    // Move the head towards higher cylinders again
    for (i = 0; i < n; i++) {
        if (requests[i] >= head) {
            total_movement += abs(requests[i] - head);
            head = requests[i];
        }
    }

    printf("Total head movement for C-SCAN: %d\n", total_movement);
}

int main() {
    int requests[MAX_REQUESTS];
    int n, i;

    printf("Enter the number of disk requests: ");
    scanf("%d", &n);

    if (n <= 0 || n > MAX_REQUESTS) {
        printf("Invalid number of requests.\n");
        return 1;
    }

    printf("Enter the disk requests: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &requests[i]);
        if (requests[i] < 0 || requests[i] >= CYLINDERS) {
            printf("Invalid request.\n");
            return 1;
        }
    }

    cscan(requests, n);

    return 0;
}
