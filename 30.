#include <stdio.h>
#include <pthread.h>

void *thread_function(void *arg) {
    printf("This is a thread function\n");
    pthread_exit(NULL);
}

int main() {
    pthread_t tid;
    pthread_create(&tid, NULL, thread_function, NULL);
    pthread_join(tid, NULL);
    printf("Main thread exiting\n");
    return 0;
}

#include <stdio.h>
#include <pthread.h>

#define NUM_THREADS 5

pthread_mutex_t mutex;
int counter = 0;

void *thread_function(void *arg) {
    pthread_mutex_lock(&mutex);
    counter++;
    printf("Counter value: %d\n", counter);
    pthread_mutex_unlock(&mutex);
    pthread_exit(NULL);
}

int main() {
    pthread_t threads[NUM_THREADS];
    pthread_mutex_init(&mutex, NULL);
    
    for (int i = 0; i < NUM_THREADS; i++) {
        pthread_create(&threads[i], NULL, thread_function, NULL);
    }
    
    for (int i = 0; i < NUM_THREADS; i++) {
        pthread_join(threads[i], NULL);
    }
    
    pthread_mutex_destroy(&mutex);
    printf("Main thread exiting\n");
    return 0;
}
#include <stdio.h>
#include <pthread.h>

#define MAX 10

pthread_mutex_t mutex;
pthread_cond_t cond;
int buffer = 0;

void *producer(void *arg) {
    for (int i = 0; i < MAX; i++) {
        pthread_mutex_lock(&mutex);
        while (buffer != 0)
            pthread_cond_wait(&cond, &mutex);
        buffer = i + 1;
        printf("Produced: %d\n", buffer);
        pthread_cond_signal(&cond);
        pthread_mutex_unlock(&mutex);
    }
    pthread_exit(NULL);
}

void *consumer(void *arg) {
    for (int i = 0; i < MAX; i++) {
        pthread_mutex_lock(&mutex);
        while (buffer == 0)
            pthread_cond_wait(&cond, &mutex);
        printf("Consumed: %d\n", buffer);
        buffer = 0;
        pthread_cond_signal(&cond);
        pthread_mutex_unlock(&mutex);
    }
    pthread_exit(NULL);
}

int main() {
    pthread_t producer_thread, consumer_thread;

    pthread_mutex_init(&mutex, NULL);
    pthread_cond_init(&cond, NULL);

    pthread_create(&producer_thread, NULL, producer, NULL);
    pthread_create(&consumer_thread, NULL, consumer, NULL);

    pthread_join(producer_thread, NULL);
    pthread_join(consumer_thread, NULL);

    pthread_mutex_destroy(&mutex);
    pthread_cond_destroy(&cond);

    printf("Main thread exiting\n");

    return 0;
}
