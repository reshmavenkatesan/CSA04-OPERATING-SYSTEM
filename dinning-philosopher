#include <stdio.h>
#include <pthread.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5
#define EAT_TIMES 3

pthread_mutex_t forks[NUM_PHILOSOPHERS];
pthread_t philosophers[NUM_PHILOSOPHERS];
int food[NUM_PHILOSOPHERS];

void *philosopher(void *arg) {
    int id = *((int *)arg);
    int left = id;
    int right = (id + 1) % NUM_PHILOSOPHERS;
    
    for (int i = 0; i < EAT_TIMES; ++i) {
        printf("Philosopher %d is thinking.\n", id);
        usleep(1000000); // Thinking for some time
        
        // Acquire forks
        pthread_mutex_lock(&forks[left]);
        pthread_mutex_lock(&forks[right]);
        
        printf("Philosopher %d is eating.\n", id);
        food[id]++; // Increment eaten times
        
        // Release forks
        pthread_mutex_unlock(&forks[right]);
        pthread_mutex_unlock(&forks[left]);
    }
    
    return NULL;
}

int main() {
    // Initialize mutexes for forks
    for (int i = 0; i < NUM_PHILOSOPHERS; ++i) {
        pthread_mutex_init(&forks[i], NULL);
    }
    
    // Create philosopher threads
    for (int i = 0; i < NUM_PHILOSOPHERS; ++i) {
        int *id = malloc(sizeof(int));
        *id = i;
        pthread_create(&philosophers[i], NULL, philosopher, id);
    }
    
    // Join philosopher threads
    for (int i = 0; i < NUM_PHILOSOPHERS; ++i) {
        pthread_join(philosophers[i], NULL);
    }
    
    // Destroy mutexes for forks
    for (int i = 0; i < NUM_PHILOSOPHERS; ++i) {
        pthread_mutex_destroy(&forks[i]);
    }
    
    // Print the number of times each philosopher ate
    for (int i = 0; i < NUM_PHILOSOPHERS; ++i) {
        printf("Philosopher %d ate %d times.\n", i, food[i]);
    }
    
    return 0;
}
